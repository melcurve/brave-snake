{"version":3,"sources":["assets/images/splash_screen.png","App.tsx","utils/common.ts","routes/yard/yard.tsx","routes/routers-routing.tsx","index.tsx"],"names":["App","className","src","splashScreen","alt","to","React","Component","randomNumber","min","max","Math","floor","random","Yard","yardRef","yardSize","state","blockMap","Array","pow","fill","map","_item","index","isEdgeIndex","id","type","snakeInfo","name","position","direction","speed","score","gameInterval","this","ref","e","tabIndex","onKeyDown","onkeydown","item","includes","length","focus","setFood","setGameInterval","isEdge","i","clearGameInterval","setInterval","goSnakeGo","clearInterval","leftHead","handleMove","push","addScore","rightHeight","upHead","downHead","setState","gameover","splice","foodBlock","find","getPosition","number","key","RoutersRouting","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAAe,G,MAAA,IAA0B,2C,OCKpBA,E,4JACnB,WACE,OACE,sBAAKC,UAAU,wDAAf,UACE,qBAAKA,UAAU,OAAOC,IAAKC,EAAcC,IAAI,KAC7C,cAAC,IAAD,CAAMH,UAAU,aAAaI,GAAG,QAAhC,6C,GALyBC,IAAMC,WCoFhC,SAASC,EAAaC,EAAaC,GACxC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,E,UCrFlCK,E,4MACnBC,a,IAEAC,SAAmB,G,EAEnBC,MAAmB,CACjBC,SAAUC,MAAMR,KAAKS,IAAI,EAAKJ,SAAU,IACrCK,KAAK,IACLC,KAAI,SAACC,EAAOC,GACX,OAAI,EAAKC,YAAYD,GAAe,CAAEE,GAAIF,EAAOG,KAAM,QAChD,CAAED,GAAIF,EAAOG,KAAM,cAE9BC,UAAW,CACTC,KAAM,QACNC,SAAU,CAAC,EAAKd,SAAU,EAAKA,SAAW,EAAG,EAAKA,SAAW,GAC7De,UAAW,SAEbC,MAAO,IACPC,MAAO,G,EAGTC,kB,8CAEA,WACE,OAAOC,KAAKlB,MAAMC,W,qBAGpB,WACE,OAAOiB,KAAKlB,MAAMW,Y,oBAGpB,WAAU,IAAD,OAOP,OACE,sBAAK3B,UAAU,OAAOmC,IAAK,SAACC,GAAD,OAAQ,EAAKtB,QAAUsB,GAAIC,SAAU,EAAGC,UAAW,SAACF,GAAD,OAAO,EAAKG,UAAUH,IAApG,UACE,qBAAKpC,UAAU,2BAAf,SAPK,EAAKiB,SAASI,KAAI,SAACmB,EAAiBjB,GACzC,OAAO,qBAAmBvB,UAAS,qBAAgB,EAAK2B,UAAUE,SAASY,SAASlB,GAAS,SAAW,GAArE,YAA2EA,GAAS,EAAKI,UAAUE,SAAS,EAAKF,UAAUE,SAASa,OAAS,GAAK,OAAS,GAA3J,iBAAsKF,EAAKd,OAA7Lc,EAAKf,SAOtB,qBAAKzB,UAAU,sBAAf,SACE,sBAAKA,UAAU,QAAf,+BAA2BkC,KAAKlB,MAAMgB,gB,+BAM9C,WACEE,KAAKpB,QAAQ6B,QACbT,KAAKU,UACLV,KAAKW,oB,yBAGP,SAAYtB,GACV,IAAIuB,GAAS,GACTvB,EAAQ,GAAKW,KAAKnB,UAAYQ,EAAQ,GAAKW,KAAKnB,UAAYmB,KAAKnB,SAAW,MAAI+B,GAAS,GAC7F,IAAK,IAAIC,EAAI,EAAGA,GAAKb,KAAKnB,SAAUgC,IAC9BxB,GAASwB,EAAIb,KAAKnB,SAAWmB,KAAKnB,UAAYQ,GAASwB,EAAIb,KAAKnB,SAAW,IAAG+B,GAAS,GAE7F,OAAOA,I,6BAGT,WAAmB,IAAD,OAChBZ,KAAKc,oBACLd,KAAKD,aAAegB,aAAY,WAC9B,EAAKC,cACJhB,KAAKlB,MAAMe,S,+BAGhB,WACOG,KAAKD,eACVkB,cAAcjB,KAAKD,cACnBC,KAAKD,aAAe,Q,uBAGtB,WACE,IAAIN,EAAYO,KAAKP,UACjBE,EAAWF,EAAUE,SACzB,OAAQK,KAAKP,UAAUG,WACrB,IAAK,OACH,IAAMsB,EAAWvB,EAASA,EAASa,OAAS,GAAK,EACjDR,KAAKmB,WAAWD,GACoB,QAAhClB,KAAKjB,SAASmC,GAAU1B,OAC1BG,EAASyB,KAAKF,EAAW,GACzBlB,KAAKqB,WACLrB,KAAKU,WAEP,MACF,IAAK,QACH,IAAMY,EAAc3B,EAASA,EAASa,OAAS,GAAK,EACpDR,KAAKmB,WAAWG,GACuB,QAAnCtB,KAAKjB,SAASuC,GAAa9B,OAC7BG,EAASyB,KAAKE,EAAc,GAC5BtB,KAAKqB,WACLrB,KAAKU,WAEP,MACF,IAAK,KACH,IAAMa,EAAS5B,EAASA,EAASa,OAAS,GAAKR,KAAKnB,SACpDmB,KAAKmB,WAAWI,GACkB,QAA9BvB,KAAKjB,SAASwC,GAAQ/B,OACxBG,EAASyB,KAAKG,EAASvB,KAAKnB,UAC5BmB,KAAKqB,WACLrB,KAAKU,WAEP,MACF,IAAK,OACH,IAAMc,EAAW7B,EAASA,EAASa,OAAS,GAAKR,KAAKnB,SACtDmB,KAAKmB,WAAWK,GACoB,QAAhCxB,KAAKjB,SAASyC,GAAUhC,OAC1BG,EAASyB,KAAKI,EAAWxB,KAAKnB,UAC9BmB,KAAKqB,WACLrB,KAAKU,WAIXV,KAAKyB,SAAS,CACZhC,gB,wBAIJ,SAAWE,GAC2B,QAAhCK,KAAKjB,SAASY,GAAUH,MAAkBQ,KAAKP,UAAUE,SAASY,SAASZ,GAC7EK,KAAK0B,YAGP1B,KAAKP,UAAUE,SAASgC,OAAO,EAAG,GAClC3B,KAAKP,UAAUE,SAASyB,KAAKzB,M,sBAG/B,WACEK,KAAKlB,MAAMgB,U,qBAGb,WAAW,IAAD,OAOJf,EAAWiB,KAAKjB,SAChB6C,EAAY7C,EAAS8C,MAAK,SAACvB,GAAD,MAAuB,QAAbA,EAAKd,QACzCoC,IAAWA,EAAUpC,KAAO,WAEhCT,EAVoB,SAAd+C,IACJ,IAAMC,EAAS1D,EAAa,EAAGG,KAAKS,IAAI,EAAKJ,SAAU,IACvD,OAAI,EAAKY,UAAUE,SAASY,SAASwB,IAAyC,QAA9B,EAAKhD,SAASgD,GAAQvC,KAAuBsC,IACjFC,EAMGD,IACEtC,KAAO,OAC1BQ,KAAKyB,SAAS,CAAE1C,e,uBAGlB,SAAUmB,GACR,OAAQA,EAAE8B,KACR,IAAK,UAC6B,QAA5BhC,KAAKP,UAAUG,YAAqBI,KAAKP,UAAUG,UAAY,MACnE,MACF,IAAK,YAC6B,SAA5BI,KAAKP,UAAUG,YAAsBI,KAAKP,UAAUG,UAAY,QACpE,MACF,IAAK,aAC6B,QAA5BI,KAAKP,UAAUG,YAAqBI,KAAKP,UAAUG,UAAY,SACnE,MACF,IAAK,YAC6B,MAA5BI,KAAKP,UAAUG,YAAmBI,KAAKP,UAAUG,UAAY,W,sBAKvE,WACEI,KAAKc,wB,GAxKyB3C,IAAMC,WCDzB,SAAS6D,IACtB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvE,IACjC,cAAC,IAAD,CAAOqE,OAAK,EAACC,KAAK,QAAQC,UAAWzD,SCL7C0D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACN,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.07d3549c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/splash_screen.bc103dfa.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./styles/style.scss\";\nimport splashScreen from \"./assets/images/splash_screen.png\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"splash-screen flex-column justify-center align-center\">\n        <img className=\"logo\" src={splashScreen} alt=\"\" />\n        <Link className=\"start-game\" to=\"/yard\">开始游戏</Link>\n      </div>\n    );\n  }\n}\n","export const PATTERN_EMPTY = /\\S/; // 是否为空\r\nexport const PATTERN_ISPHONE = /^1[3456789]\\d{9}$/; // 是否为手机号\r\nexport const PATTERN_ISVIDEO = /\\.(swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4)/; // 是否为视频\r\nexport const PATTERN_HASCN = /[\\u4e00-\\u9fa5]/; // 是否包含中文\r\nexport const PATTERN_NUMBER = /^[0-9]*$/; // 纯数字\r\nexport const PATTERN_DIGIT = /^(([0-9])|([1-9]([0-9]+)))(.[0-9]+)?$/; // 数字和小数点\r\n\r\n/**\r\n * 判断是否有值（包含0）\r\n * @param value 值\r\n * @param type 判断类型 0 默认判断 1 是否为数组且数组是否为空 2 是否为对象且对象是否为空\r\n */\r\nexport function valid(value: any, type?: 0 | 1 | 2 | 3): boolean {\r\n  // 普通判断\r\n  if (!value && value !== 0) return false;\r\n  else if (!type) return true;\r\n  // 数组判断\r\n  if (type === 1) return Boolean((value instanceof Array) && value.length);\r\n  // 对象判断\r\n  if (type === 2) return Boolean((value instanceof Object) && Object.keys(value).length > 0);\r\n};\r\n\r\n/**\r\n * 深拷贝\r\n * @param {object} target 需要深拷贝的对象\r\n * @return 返回对象,如果传入的值不是对象则返回原来的值\r\n */\r\nexport function deepClone(target: any) {\r\n  let result = null;\r\n  if (typeof target === 'object') {\r\n    if (Array.isArray(target)) {\r\n      result = [];\r\n      for (let i in target) {\r\n        result.push(deepClone(target[i]));\r\n      }\r\n    } else if (target === null) {\r\n      result = null;\r\n    } else if (target.constructor === RegExp || target.constructor === Date) {\r\n      result = target;\r\n    } else {\r\n      result = {};\r\n      for (let i in target) {\r\n        result[i] = deepClone(target[i]);\r\n      }\r\n    }\r\n  } else {\r\n    result = target;\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * 延时\r\n * @param callback 回调\r\n * @param timeout 延时，不传则为0\r\n */\r\nexport function delay(callback: any, timeout?: number) {\r\n  let t = setTimeout(() => {\r\n    if (t) clearTimeout(t);\r\n    callback();\r\n  }, timeout || 0);\r\n};\r\n\r\n/**\r\n * 数组分割\r\n * @param array 需要分割的数组\r\n * @param groupLength 组大小\r\n */\r\nexport function arrayGroup(array: Array<any>, groupLength) {\r\n  var index = 0;\r\n  var newArray = [];\r\n  while (index < array.length) {\r\n    newArray.push(array.slice(index, index += groupLength));\r\n  }\r\n  return newArray;\r\n};\r\n\r\n/**\r\n * 对象转数组\r\n */\r\nexport function objectToArray(object: any): Array<any> {\r\n  return Object.values(object);\r\n}\r\n\r\n/**\r\n * 获取数字区间的随机数\r\n * @param min 最小值\r\n * @param max 最大值\r\n */\r\nexport function randomNumber(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\n/**\r\n * 数字补0\r\n * @param {number} number 数字\r\n * @param {*} length 返回的长度\r\n * @return 返回\r\n */\r\nexport function fixNumber(number: any, length?: number) {\r\n  if (!isNaN(number)) {\r\n    if (!length) length = 2;\r\n    let len = number.toString().length;\r\n    while (len < length) {\r\n      number = '0' + number;\r\n      len++;\r\n    }\r\n    return number;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\n/**\r\n * 数组排序\r\n * @param list 数组\r\n * @param type 1 从大到小 2 从小到大\r\n */\r\nexport function sortArray(list: Array<number>, type: 1 | 2) {\r\n  let arr = deepClone(list);\r\n  arr.map((item) => {\r\n    item = Number(item);\r\n  });\r\n  arr.sort((value1: number, value2: number) => {\r\n    if (type == 1) {\r\n      return value2 - value1;\r\n    } else {\r\n      return value1 - value2;\r\n    }\r\n  });\r\n  return arr;\r\n}\r\n\r\n/**\r\n * 获取数组中的随机元素\r\n */\r\nexport function randomArrayItem(array: Array<any>) {\r\n  return array[randomNumber(0, array.length - 1)];\r\n};\r\n\r\n/**\r\n * 判断size值(px)\r\n */\r\nexport function getSize(value: string | number): string {\r\n  if (!valid(value)) return '0px';\r\n  else if (isNaN(Number(value))) {\r\n    if (String(value).indexOf('vw') >= 0) return `${document.body.clientWidth * Number(String(value).replace('vw', '')) * 0.01}px`;\r\n    else if (String(value).indexOf('vh') >= 0) return `${document.body.clientHeight * Number(String(value).replace('vh', '')) * 0.01}px`;\r\n    else return String(value);\r\n  } else return `${value}px`;\r\n};\r\n\r\nexport function inputBoolean(value: any): boolean {\r\n  return Boolean(value || value === '');\r\n};\r\n\r\nexport function changeClass(element: any, value: any, className: string) {\r\n  if (inputBoolean(value)) element.classList.add(className);\r\n  else element.classList.remove(className);\r\n}\r\n\r\nexport function isInclude(value: any, include: Array<any>): boolean {\r\n  for (let i = 0; i < include.length; i++) {\r\n    if (value === include[i]) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}","import React from \"react\";\r\nimport { BlockItem, YardState } from \".\";\r\nimport { randomNumber } from \"../../utils/common\";\r\nimport \"./yard.scss\";\r\n\r\nexport default class Yard extends React.Component {\r\n  yardRef: any;\r\n\r\n  yardSize: number = 50;\r\n\r\n  state: YardState = {\r\n    blockMap: Array(Math.pow(this.yardSize, 2))\r\n      .fill(\"\")\r\n      .map((_item, index) => {\r\n        if (this.isEdgeIndex(index)) return { id: index, type: \"edge\" };\r\n        return { id: index, type: \"default\" };\r\n      }),\r\n    snakeInfo: {\r\n      name: \"Hoovy\",\r\n      position: [this.yardSize, this.yardSize + 1, this.yardSize + 2],\r\n      direction: \"right\",\r\n    },\r\n    speed: 100,\r\n    score: 0,\r\n  };\r\n\r\n  gameInterval: any;\r\n\r\n  get blockMap() {\r\n    return this.state.blockMap;\r\n  }\r\n\r\n  get snakeInfo() {\r\n    return this.state.snakeInfo;\r\n  }\r\n\r\n  render() {\r\n    const renderBlockItem = () => {\r\n      return this.blockMap.map((item: BlockItem, index) => {\r\n        return <div key={item.id} className={`block-item ${this.snakeInfo.position.includes(index) ? \"filled\" : \"\"} ${index == this.snakeInfo.position[this.snakeInfo.position.length - 1] ? \"head\" : \"\"} type-${item.type}`}></div>;\r\n      });\r\n    };\r\n\r\n    return (\r\n      <div className=\"yard\" ref={(e) => (this.yardRef = e)} tabIndex={0} onKeyDown={(e) => this.onkeydown(e)}>\r\n        <div className=\"block-container flex-row\">{renderBlockItem()}</div>\r\n        <div className=\"info-block flex-row\">\r\n          <div className=\"score\">积分：{this.state.score}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.yardRef.focus();\r\n    this.setFood();\r\n    this.setGameInterval();\r\n  }\r\n\r\n  isEdgeIndex(index: number): boolean {\r\n    let isEdge = false;\r\n    if (index + 1 <= this.yardSize || index + 1 >= this.yardSize * (this.yardSize - 1)) isEdge = true;\r\n    for (let i = 1; i <= this.yardSize; i++) {\r\n      if (index == i * this.yardSize - this.yardSize || index == i * this.yardSize - 1) isEdge = true;\r\n    }\r\n    return isEdge;\r\n  }\r\n\r\n  setGameInterval() {\r\n    this.clearGameInterval();\r\n    this.gameInterval = setInterval(() => {\r\n      this.goSnakeGo();\r\n    }, this.state.speed);\r\n  }\r\n\r\n  clearGameInterval() {\r\n    if (!this.gameInterval) return;\r\n    clearInterval(this.gameInterval);\r\n    this.gameInterval = null;\r\n  }\r\n\r\n  goSnakeGo() {\r\n    let snakeInfo = this.snakeInfo;\r\n    let position = snakeInfo.position;\r\n    switch (this.snakeInfo.direction) {\r\n      case \"left\":\r\n        const leftHead = position[position.length - 1] - 1;\r\n        this.handleMove(leftHead);\r\n        if (this.blockMap[leftHead].type == \"food\") {\r\n          position.push(leftHead - 1);\r\n          this.addScore();\r\n          this.setFood();\r\n        }\r\n        break;\r\n      case \"right\":\r\n        const rightHeight = position[position.length - 1] + 1;\r\n        this.handleMove(rightHeight);\r\n        if (this.blockMap[rightHeight].type == \"food\") {\r\n          position.push(rightHeight + 1);\r\n          this.addScore();\r\n          this.setFood();\r\n        }\r\n        break;\r\n      case \"up\":\r\n        const upHead = position[position.length - 1] - this.yardSize;\r\n        this.handleMove(upHead);\r\n        if (this.blockMap[upHead].type == \"food\") {\r\n          position.push(upHead - this.yardSize);\r\n          this.addScore();\r\n          this.setFood();\r\n        }\r\n        break;\r\n      case \"down\":\r\n        const downHead = position[position.length - 1] + this.yardSize;\r\n        this.handleMove(downHead);\r\n        if (this.blockMap[downHead].type == \"food\") {\r\n          position.push(downHead + this.yardSize);\r\n          this.addScore();\r\n          this.setFood();\r\n        }\r\n        break;\r\n    }\r\n    this.setState({\r\n      snakeInfo,\r\n    });\r\n  }\r\n\r\n  handleMove(position: number) {\r\n    if (this.blockMap[position].type == \"edge\" || this.snakeInfo.position.includes(position)) {\r\n      this.gameover();\r\n      return;\r\n    }\r\n    this.snakeInfo.position.splice(0, 1);\r\n    this.snakeInfo.position.push(position);\r\n  }\r\n\r\n  addScore() {\r\n    this.state.score++;\r\n  }\r\n\r\n  setFood() {\r\n    const getPosition = (): number => {\r\n      const number = randomNumber(0, Math.pow(this.yardSize, 2));\r\n      if (this.snakeInfo.position.includes(number) || this.blockMap[number].type == \"edge\") return getPosition();\r\n      else return number;\r\n    };\r\n\r\n    let blockMap = this.blockMap;\r\n    let foodBlock = blockMap.find((item) => item.type == \"food\");\r\n    if (foodBlock) foodBlock.type = \"default\";\r\n    const position = getPosition();\r\n    blockMap[position].type = \"food\";\r\n    this.setState({ blockMap });\r\n  }\r\n\r\n  onkeydown(e: any) {\r\n    switch (e.key) {\r\n      case \"ArrowUp\":\r\n        if (this.snakeInfo.direction != \"down\") this.snakeInfo.direction = \"up\";\r\n        break;\r\n      case \"ArrowLeft\":\r\n        if (this.snakeInfo.direction != \"right\") this.snakeInfo.direction = \"left\";\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (this.snakeInfo.direction != \"left\") this.snakeInfo.direction = \"right\";\r\n        break;\r\n      case \"ArrowDown\":\r\n        if (this.snakeInfo.direction != \"up\") this.snakeInfo.direction = \"down\";\r\n        break;\r\n    }\r\n  }\r\n\r\n  gameover() {\r\n    this.clearGameInterval();\r\n  }\r\n}\r\n","import { HashRouter, Switch, Route } from \"react-router-dom\";\r\nimport App from \"../App\";\r\nimport Yard from \"./yard/yard\";\r\n\r\nexport default function RoutersRouting() {\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={App} />\r\n        <Route exact path=\"/yard\" component={Yard} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport RoutersRouting from \"./routes/routers-routing\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RoutersRouting />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}